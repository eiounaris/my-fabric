# Definition of nodes
# addr address for node
# tls_ca_cert tls cert
peer0: &peer0
  addr: peer0.org0.example.com:8050
  tls_ca_cert: ./organizations/peerOrganizations/org0.example.com/peers/peer0.org0.example.com/msp/tlscacerts/tlsca.org0.example.com-cert.pem

peer1: &peer1
  addr: peer0.org1.example.com:9050
  tls_ca_cert: ./organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/tlscacerts/tlsca.org1.example.com-cert.pem

orderer0: &orderer0
  addr: localhost:7050
  tls_ca_cert: ./organizations/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem

# policyFile: ./andLogic.rego

# Peer Nodes to interact with as endorsement Peers
endorsers:
  - *peer0
  - *peer1

# Peer Nodes to interact with as Commit Peers as listening
committers: 
  - *peer0
  - *peer1
# we might support multi-committer in the future for more complex test scenario.
# i.e. consider tx committed only if it's done on >50% of nodes. 
# Give your commit Threshold as numbers for peers here.
commitThreshold: 2

# orderer Nodes to interact with
orderer: *orderer0

# Invocation configs
channel: mychannel
chaincode: mychaincode
# chain code args below, in a list of str
# we provides 3 kinds of randmon
# uuid
# randomString$length
# randomNumber$min_$max
args:
  - GetAllAssets
# Tx submiter information
mspid: Org0MSP
private_key: ./organizations/peerOrganizations/org0.example.com/users/User1@org0.example.com/msp/keystore/priv_sk
sign_cert: ./organizations/peerOrganizations/org0.example.com/users/User1@org0.example.com/msp/signcerts/User1@org0.example.com-cert.pem
# network traffic control
num_of_conn: 10
client_per_conn: 10
